
@book{odersky_programming_2008,
  title = {Programming in {{Scala}}},
  isbn = {978-0-9815316-0-1},
  abstract = {Programming in Scala is the definitive book on Scala, the new language for the Java Platform that blends object-oriented and functional programming concepts into a unique and powerful tool for developers. Coauthored by the designer of the Scala language, this authoritative book will teach you, one step at a time, the Scala language and the ideas behind it. The book is carefully crafted to help you learn. The first few chapters will give you enough of the basics that you can already start using Scala for simple tasks. The entire book is organized so that each new concept builds on concepts that came before - a series of steps that promises to help you master the Scala language and the important ideas about programming that Scala embodies. A comprehensive tutorial and reference for Scala, this book covers the entire language and important libraries.},
  language = {en},
  publisher = {{Artima Inc}},
  author = {Odersky, Martin and Spoon, Lex and Venners, Bill},
  year = {2008},
  keywords = {Computers / Programming / Object Oriented,Computers / Programming Languages / General,Computers / Programming Languages / Java},
  file = {/Users/Benjamin/Zotero/storage/7FJWHDZI/Odersky et al. - 2008 - Programming in Scala.pdf}
}

@techreport{odersky2004overview,
  title = {An Overview of the {{Scala}} Programming Language},
  author = {Odersky, Martin and Altherr, Philippe and Cremet, Vincent and Emir, Burak and Maneth, Sebastian and Micheloud, St{\'e}phane and Mihaylov, Nikolay and Schinz, Michel and Stenman, Erik and Zenger, Matthias},
  year = {2004},
  file = {/Users/Benjamin/Zotero/storage/GTJXFH8I/Odersky et al. - 2004 - An overview of the Scala programming language.pdf}
}

@inproceedings{odersky_nominal_2003,
  series = {Lecture {{Notes}} in {{Computer Science}}},
  title = {A {{Nominal Theory}} of {{Objects}} with {{Dependent Types}}},
  isbn = {978-3-540-45070-2},
  abstract = {We design and study vObj, a calculus and dependent type system for objects and classes which can have types as members. Type members can be aliases, abstract types, or new types. The type system can model the essential concepts of JAVA's inner classes as well as virtual types and family polymorphism found in BETA or GBETA. It can also model most concepts of SML-style module systems, including sharing constraints and higher-order functors, but excluding applicative functors. The type system can thus be used as a basis for unifying concepts that so far existed in parallel in advanced object systems and in module systems. The paper presents results on confluence of the calculus, soundness of the type system, and undecidability of type checking.},
  language = {en},
  booktitle = {{{ECOOP}} 2003 \textendash{} {{Object}}-{{Oriented Programming}}},
  publisher = {{Springer Berlin Heidelberg}},
  author = {Odersky, Martin and Cremet, Vincent and R{\"o}ckl, Christine and Zenger, Matthias},
  editor = {Cardelli, Luca},
  year = {2003},
  keywords = {Abstract Type,Dependent Type,Derivation Rule,Record Type,Type Soundness},
  pages = {201-224},
  file = {/Users/Benjamin/Zotero/storage/HH4PCLTC/Odersky et al. - 2003 - A Nominal Theory of Objects with Dependent Types.pdf}
}

@inproceedings{matsakis_rust_2014,
  address = {{New York, NY, USA}},
  series = {{{HILT}} '14},
  title = {The {{Rust Language}}},
  isbn = {978-1-4503-3217-0},
  abstract = {Rust is a new programming language for developing reliable and efficient systems. It is designed to support concurrency and parallelism in building applications and libraries that take full advantage of modern hardware. Rust's static type system is safe1 and expressive and provides strong guarantees about isolation, concurrency, and memory safety. Rust also offers a clear performance model, making it easier to predict and reason about program efficiency. One important way it accomplishes this is by allowing fine-grained control over memory representations, with direct support for stack allocation and contiguous record storage. The language balances such controls with the absolute requirement for safety: Rust's type system and runtime guarantee the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized or deallocated memory.},
  booktitle = {Proceedings of the 2014 {{ACM SIGAda Annual Conference}} on {{High Integrity Language Technology}}},
  publisher = {{ACM}},
  doi = {10.1145/2663171.2663188},
  author = {Matsakis, Nicholas D. and Klock, II, Felix S.},
  year = {2014},
  keywords = {affine type systems,memory management,rust,systems programming},
  pages = {103--104}
}


